#
# Copyright 2023 Basislager Services
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

type Query {
    getCommunityMemberPublic(legacyMemberId: ID, memberId: ID): CommunityMemberUserProfile
    getMemberRelationshipsPublic(memberId: ID!): MemberRelationships
    getRatingLogForPosting(postingId: ID): [RatingLogEntry]
    getForumByContextUri(contextUri: String!): Forum
    getForumRootPostingsV2(getForumRootPostingsParamsV2: GetForumRootPostingsParamsV2!): RootPostings
}

type CommunityMemberUserProfile {
    memberId: ID
    bio: String
    flags: [String]
    legacyId: ID
    memberCreatedAt: String
    name: String
    personalLink: String
    status: String
    supporterBadgeEnabled: Boolean
    totalPostingCount: Int
}

type CommunityMember {
    memberId: ID
    bio: String
    flags: [String]
    legacyId: ID
    memberCreatedAt: String
    name: String
    personalLink: String
    status: String
    supporterBadgeEnabled: Boolean
}

type Relationship {
    member: CommunityMember
    postingCount: Int
}

type MemberRelationships {
    follower: [Relationship]
    followees: [Relationship]
    ignorees: [Relationship]
}

type AuthorLegacyData {
    legacyCommunityIdentity: ID
}

type Metadata {
    key: String
    value: String
}

type Feature {
    name: String
    value: Int
    statistic: String
}

type PostingHistory {
    created: String
}

type PostingLegacyData {
    communityName: String
    communityIdentityId: Int
    postingId: Int
}

type Reactions {
    aggregated: [Feature]
}

type Author {
    id: ID
    name: String
    lifecycleStatus: String
    legacyData: AuthorLegacyData
    flags: [String]
    status: String
    followerCount: Int
    metadata: [Metadata]
}

type RatingLogEntry {
    value: String  # "n" or "p"
    author: Author
    type: String
}

type Posting {
    id: ID
    lifecycleStatus: String
    flags: [String]
    rootPostingId: ID
    text: String
    title: String
    author: Author
    metadata: [String]
    reactions: Reactions
    history: PostingHistory
    legacy: PostingLegacyData
    replies: [Posting]
}

type Forum {
    id: ID
    flags: [String]
    totalPostingCount: Int
    stickyPostings: [Posting]
    metadata: [String]
}

type PageInfo {
    nextCursor: String
    previousCursor: String
    hasNextPage: Boolean
    hasPreviousPage: Boolean
}

type Edge {
    node: Posting
    cursor: String
}

type RootPostings {
    pageInfo: PageInfo
    edges: [Edge]
}

enum RootPostingsToRequest {
    Min
    Max
}

enum PostingSortOrder {
    ByTime
    ByPositiveRatings
    ByNegativeRatings
}

input GetForumRootPostingsParamsV2 {
    forumId: String!
    before: String
    after: String
    first: RootPostingsToRequest
    last: RootPostingsToRequest
    sortOrder: PostingSortOrder
}